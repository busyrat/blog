(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{547:function(e,t,n){"use strict";n.r(t);var r=n(18),a=Object(r.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"gitlab-ci持续集成-实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci持续集成-实例","aria-hidden":"true"}},[e._v("#")]),e._v(" Gitlab CI持续集成 实例")]),e._v(" "),n("h2",{attrs:{id:"基于docker的executor构建流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于docker的executor构建流程","aria-hidden":"true"}},[e._v("#")]),e._v(" 基于Docker的Executor构建流程")]),e._v(" "),n("ol",[n("li",[e._v("用户提交代码")]),e._v(" "),n("li",[e._v("Gitlab CI检测是否有.gitlab-ci.yml文件")]),e._v(" "),n("li",[e._v("如果有，调用注册到Gitlab CI上的runner；如果没有，停止，不执行任何操作")]),e._v(" "),n("li",[e._v("runner启动指定的Docker镜像，生成executor容器")]),e._v(" "),n("li",[e._v("进入容器，同步项目代码")]),e._v(" "),n("li",[e._v("执行.gitlab-ci.yml中的script代码")]),e._v(" "),n("li",[e._v("结束")])]),e._v(" "),n("h3",{attrs:{id:"前提条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前提条件","aria-hidden":"true"}},[e._v("#")]),e._v(" 前提条件")]),e._v(" "),n("ul",[n("li",[e._v("已搭建好Gitlab服务器（Gitlab服务器已经自带Gitlab-CI）")]),e._v(" "),n("li",[e._v("已有Gitlab项目权限（联系管理员添加）")]),e._v(" "),n("li",[e._v("准备好构建服务器（用于安装Citlab runner），并安装好docker")])]),e._v(" "),n("h3",{attrs:{id:"安装、注册gitlab-runner"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装、注册gitlab-runner","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装、注册Gitlab-runner")]),e._v(" "),n("p",[e._v("有关runner的详细信息参考"),n("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/runners/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方网站"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("p",[e._v("登入192.168.1.48，拉取gitlab-runner镜像：")]),e._v(" "),n("pre",[n("code",[e._v("  docker search gitlab-runner\n  docker pull gitlab/gitlab-runner\n")])])]),e._v(" "),n("li",[n("p",[e._v("启动runner：")]),e._v(" "),n("pre",[n("code",[e._v("  docker run -d --name gitlab-runner-back-end --restart always \\\n  -v /home/docker/gitlab-runner-back-end/config:/etc/gitlab-runner \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  gitlab/gitlab-runner:latest\n")])]),e._v(" "),n("blockquote",[n("p",[e._v("注：/etc/gitlab-runner文件夹中存放runner的配置信息（config.toml），刚启动时无此文件，在注册完毕后自动生成")])])]),e._v(" "),n("li",[n("p",[e._v("注册runner")]),e._v(" "),n("p",[e._v("进入runner容器")]),e._v(" "),n("pre",[n("code",[e._v("  docker exec -it gitlab-runner-back-end /bin/bash\n")])]),e._v(" "),n("p",[e._v("然后按照以下9个步骤进行：")]),e._v(" "),n("blockquote",[n("p",[e._v("注：注册过程中的第2、3两步使用的URL和token可以在gitlab项目的设置中拿到：进入项目，setting->pipelines，找到Specific Runners，内容如下")])]),e._v(" "),n("pre",[n("code",[e._v("  How to setup a specific Runner for a new project\n  1.Install a Runner compatible with GitLab CI (checkout the GitLab Runner section for information on how to install it).\n  2.Specify the following URL during the Runner setup: https://git.fpi-inc.com/\n  3.Use the following registration token during setup: aZf4y4SaJkHNDZh9cvJL\n  4.Start the Runner!\n")])]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Run the following command:")]),e._v(" "),n("pre",[n("code",[e._v(" sudo gitlab-runner register\n")])])]),e._v(" "),n("li",[n("p",[e._v("Enter your GitLab instance URL:")])])]),e._v(" "),n("blockquote",[n("p",[e._v("URL需要在以下位置获得：进入Gitlab项目->Settings->Pipelines->Specific Runners")])]),e._v(" "),n("pre",[n("code",[e._v("  \tPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\n  \thttps://gitlab.com\n")])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[e._v("Enter the token you obtained to register the Runner:")]),e._v(" "),n("blockquote",[n("p",[e._v("token需要在以下位置获得：进入Gitlab项目->Settings->Pipelines->Specific Runners")])]),e._v(" "),n("pre",[n("code",[e._v(" Please enter the gitlab-ci token for this runner\n xxx\n")])])]),e._v(" "),n("li",[n("p",[e._v("Enter a description for the Runner, you can change this later in GitLab's UI:")]),e._v(" "),n("pre",[n("code",[e._v(" Please enter the gitlab-ci description for this runner\n [hostame] my-runner\n")])])]),e._v(" "),n("li",[n("p",[e._v("Enter the tags associated with the Runner, you can change this later in GitLab's UI:")]),e._v(" "),n("blockquote",[n("p",[e._v("Gitlab CI可以使用tags来指定对应的runner执行脚本")])]),e._v(" "),n("pre",[n("code",[e._v(" Please enter the gitlab-ci tags for this runner (comma separated):\n my-tag,another-tag\n")])])]),e._v(" "),n("li",[n("p",[e._v("Choose whether the Runner should pick up jobs that do not have tags, you can change this later in GitLab's UI (defaults to false):")]),e._v(" "),n("pre",[n("code",[e._v(" Whether to run untagged jobs [true/false]:\n [false]: true\n")])])]),e._v(" "),n("li",[n("p",[e._v("Choose whether to lock the Runner to the current project, you can change this later in GitLab's UI. Useful when the Runner is specific (defaults to true):")]),e._v(" "),n("pre",[n("code",[e._v(" Whether to lock Runner to current project [true/false]:\n [true]: true\n")])])]),e._v(" "),n("li",[n("p",[e._v("Enter the Runner executor:")]),e._v(" "),n("blockquote",[n("p",[e._v("这里选择docker作为执行器")])]),e._v(" "),n("pre",[n("code",[e._v(" Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\n docker\n")])])]),e._v(" "),n("li",[n("p",[e._v("If you chose Docker as your executor, you'll be asked for the default image to be used for projects that do not define one in .gitlab-ci.yml:")]),e._v(" "),n("blockquote",[n("p",[e._v("设置默认的镜像，如果.gitlab-ci.yml中指定了镜像，则此设置会被覆盖")])]),e._v(" "),n("pre",[n("code",[e._v(" Please enter the Docker image (eg. ruby:2.1):\n alpine:latest\n")])])])]),e._v(" "),n("p",[e._v("注册完毕后，配置信息会存入config.toml文件，可以按需手动修改。我生成的配置文件如下：")]),e._v(" "),n("pre",[n("code",[e._v('  concurrent = 1\n  check_interval = 0\n  \n  [[runners]]\n    name = "emergency-back-end"\n    url = "https://git.fpi-inc.com/"\n    token = "bdb9b14351edc5dd2977cac2ef1afc"\n    executor = "docker"\n    [runners.docker]\n      tls_verify = false\n      image = "maven:3.5.0-jdk-8"\n  \t#pull_policy\n  \tpull_policy = "if-not-present"\n      privileged = false\n      disable_cache = false\n      volumes = ["/cache","/home/docker/gitlab-runner-back-end/.m2:/root/.m2"]\n      shm_size = 0\n    [runners.cache]\n')])]),e._v(" "),n("blockquote",[n("p",[e._v('修改volumes配置项，默认只有"/cache"，此处添加了.m2挂载，为maven仓库目录，如果不挂载，每次构建maven都要重新下载各种依赖，拉长构建过程；')])]),e._v(" "),n("blockquote",[n("p",[e._v('添加了pull_policy参数，"if-not-present"表示先从本地查找镜像，再从远程仓库（docker hub）查找；如果不指定，则默认只从远端仓库查找，这时使用本地镜像就会报错。')])]),e._v(" "),n("blockquote",[n("p",[e._v("参考文献"),n("a",{attrs:{href:"https://docs.gitlab.com/runner/executors/docker.html#how-pull-policies-work",target:"_blank",rel:"noopener noreferrer"}},[e._v("How pull policies work"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("检查是否注册成功，进入Gitlab项目->Settings->Pipelines，找到Runners activated for this project，可以看到刚刚注册的runner。")])])]),e._v(" "),n("h3",{attrs:{id:"编辑-gitlab-ci-yml文件，push到项目根目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编辑-gitlab-ci-yml文件，push到项目根目录","aria-hidden":"true"}},[e._v("#")]),e._v(" 编辑.gitlab-ci.yml文件，push到项目根目录")]),e._v(" "),n("pre",[n("code",[e._v("我的.gitlab-ci.yml文件内容如下：\n\n\tbefore_script:\n\t#配置ssh key，用于script中的scp命令和ssh命令，可免于输入密码；[详细教程](https://docs.gitlab.com/ee/ci/ssh_keys/README.html)\n\n\t- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n\t- eval $(ssh-agent -s)\n\t\n\t# $SSH_PRIVATE_KEY 需要在Gitlab项目->Settings->Pipelines->Add a variable 中配置完毕后，这里才能取到，需要在runner所在服务器上生成秘钥对，并私钥添加到变量$SSH_PRIVATE_KEY中；\n\t- ssh-add <(echo \"$SSH_PRIVATE_KEY\")\n\n\t- mkdir -p ~/.ssh\n\t- '[[ -f /.dockerenv ]] && echo -e \"Host \n\n\tvariables:\n\t#APP_PATH in host\n\tAPP_PATH: \"/home/docker/tomcat/tomcat-emergency/webapps\"\n\t\n\tstages:\n\t- build\n\n\tbuild:\n\timage: maven:3.5.0-jdk-8\n\tstage: build\n\tscript:\n\t- mvn clean compile war:war\n\t- scp ./target/emergency-server-0.0.1-SNAPSHOT.war root@192.168.1.48:$APP_PATH/ROOT.war\n\t- ssh root@192.168.1.48 'docker restart tomcat-emergency'\n\tonly:\n\t- master\n")])])])},[],!1,null,null,null);t.default=a.exports}}]);