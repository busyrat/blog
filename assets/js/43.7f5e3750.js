(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{576:function(t,e,a){"use strict";a.r(e);var s=a(18),_=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"日志提交规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志提交规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 日志提交规范")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"Git%E6%97%A5%E5%BF%97%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83"}},[t._v("Git日志提交规范")])])]),t._v(" "),a("h2",{attrs:{id:"git-ignore-规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-ignore-规范","aria-hidden":"true"}},[t._v("#")]),t._v(" Git Ignore 规范")]),t._v(" "),a("p",[t._v("为了避免将不必要的文件提交到仓库中，需要我们在每个工程的"),a("code",[t._v("根目录下")]),t._v("里面编写正确的"),a("code",[t._v(".gitignore")]),t._v(" 文件。")]),t._v(" "),a("p",[t._v("由于Java和前端工程目录结构、编译内容等不一致的原因，我们需要根据前后端的不同编写不同的"),a("code",[t._v(".gitignore")]),t._v("文件。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"gitignore-for-java-project"}},[t._v(".gitignore for java project")])]),t._v(" "),a("li",[a("a",{attrs:{href:"gitignore-for-web-project"}},[t._v(".gitignore for web project")])])]),t._v(" "),a("h2",{attrs:{id:"分支开发流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支开发流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支开发流程")]),t._v(" "),a("h3",{attrs:{id:"git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flow","aria-hidden":"true"}},[t._v("#")]),t._v(" Git Flow")]),t._v(" "),a("p",[a("img",{attrs:{src:"/uploads/0d9ee292f61d9d222f277b9dac9f8893/github_flow.png",alt:"github_flow"}})]),t._v(" "),a("p",[a("strong",[t._v("说明")])]),t._v(" "),a("ol",[a("li",[t._v("创建特性分支：当你要开发一个新功能的时候，从master分支创建一个特性分支，"),a("code",[t._v("git checkout -b [fixture-branch-name]")])]),t._v(" "),a("li",[t._v("在新分支上提交代码，"),a("a",{attrs:{href:"Git%E6%97%A5%E5%BF%97%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83"}},[t._v("参考Git提交的日志规范")]),t._v("，"),a("code",[t._v("git add [files]; git commit -m 'commit messages'")])]),t._v(" "),a("li",[t._v("与主干同步，"),a("code",[t._v("git fetch origin; git rebase origin/master")])]),t._v(" "),a("li",[a("a",{attrs:{href:"%E5%90%88%E5%B9%B6Commit"}},[t._v("合并 commit")]),t._v("（该步骤可选）")]),t._v(" "),a("li",[t._v("将代码push到远程仓库，"),a("code",[t._v("git push")])]),t._v(" "),a("li",[t._v("如果该特性分支所有功能开发完成，在 "),a("a",{attrs:{href:"http://git.fpi-inc.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("git.fpi-inc.com"),a("OutboundLink")],1),t._v(" 上提交 Merge Request，Merge Request 的目的分支是 master")]),t._v(" "),a("li",[t._v("开发负责人进行"),a("a",{attrs:{href:"#%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8"}},[t._v("代码审核")]),t._v("，审核通过后方可以执行"),a("code",[t._v("Merge")]),t._v("操作，审核未通过的，提交审核反馈内容")]),t._v(" "),a("li",[a("code",[t._v("Merge")]),t._v("成功后删除特性分支")])]),t._v(" "),a("blockquote",[a("p",[t._v("为了保护master分支不被破坏，需要将 master 分支设置为保护的分支："),a("code",[t._v("Settings -> Repository -> Protected Branches")])])]),t._v(" "),a("h3",{attrs:{id:"分支命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支命名规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支命名规范")]),t._v(" "),a("blockquote",[a("p",[t._v("分支命名采用"),a("code",[t._v("[issue-id-][issue-name]")])])]),t._v(" "),a("ul",[a("li",[t._v("issue-id：可选，表示 gitlab 中的 issue 编号")]),t._v(" "),a("li",[t._v("issue-name：以中划线连接的英文短语，表示该分支对应的Feature的概述，必填")])]),t._v(" "),a("p",[t._v("保留的分支名称，严禁个人使用：")]),t._v(" "),a("ul",[a("li",[t._v("master*")]),t._v(" "),a("li",[t._v("dev*")]),t._v(" "),a("li",[t._v("release*")]),t._v(" "),a("li",[t._v("test*")]),t._v(" "),a("li",[t._v("snapshot*")]),t._v(" "),a("li",[t._v("prod*")]),t._v(" "),a("li",[t._v("production*")]),t._v(" "),a("li",[t._v("tag*")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("*")]),t._v("是通配符")])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -b 123-add-user-management-service // 正确\n\ngit checkout -b 'xiongzhijun'  // 错误，不能用个人的名字作为分支\n\ngit checkout -b 'dev' // 错误，dev 是保留分支名称\n")])])]),a("h3",{attrs:{id:"git工程强制设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git工程强制设置","aria-hidden":"true"}},[t._v("#")]),t._v(" Git工程强制设置")]),t._v(" "),a("p",[t._v("1.以下分支，不允许直接push")]),t._v(" "),a("ul",[a("li",[t._v("master*")]),t._v(" "),a("li",[t._v("dev*")]),t._v(" "),a("li",[t._v("release*")]),t._v(" "),a("li",[t._v("test*")]),t._v(" "),a("li",[t._v("snapshot*")]),t._v(" "),a("li",[t._v("prod*")]),t._v(" "),a("li",[t._v("production*")]),t._v(" "),a("li",[t._v("tag*")]),t._v(" "),a("li",[t._v("milestones*")])]),t._v(" "),a("blockquote",[a("p",[t._v("设置路径：Settings->Repository->Protected Branches->Allowed to push=No one")])]),t._v(" "),a("blockquote",[a("p",[t._v("加这一条的目的是为了推行：基于特性分支的开发模式、以及推行代码审查合并模式")])]),t._v(" "),a("p",[t._v("2.开启 Fast-forward merge")]),t._v(" "),a("p",[t._v("开启了这条设置，就不能再发起merge请求，所有的merge都是fast-forward的。如果你的分支不能进行Fast-forward merge，就要进行rebase")]),t._v(" "),a("blockquote",[a("p",[t._v("设置路径：Settings->General->Merge request->Merge method->Fast-forward merge")])]),t._v(" "),a("p",[t._v("3.开启 Only allow merge requests to be merged if the pipeline succeeds")]),t._v(" "),a("p",[t._v("只有pipeline成功的时候才可以merge（如果没配置CI，这条设置不生效）。你有一个分支A，如果A分支的CI未通过，则A分支不能合并到master分支上。")]),t._v(" "),a("blockquote",[a("p",[t._v("设置路径：Settings->General->Merge request->Merge method->Only allow merge requests to be merged if the pipeline succeeds")])]),t._v(" "),a("p",[t._v("4.开启 Only allow merge requests to be merged if all discussions are resolved")]),t._v(" "),a("p",[t._v("只有所有的discussions解决了才允许merge。")]),t._v(" "),a("blockquote",[a("p",[t._v("设置路径：Settings->General->Merge request->Merge method->Only allow merge requests to be merged if all discussions are resolved")])]),t._v(" "),a("h3",{attrs:{id:"代码审核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码审核","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码审核")]),t._v(" "),a("p",[a("strong",[t._v("基于分支的代码 Review")])]),t._v(" "),a("ol",[a("li",[t._v("新建 Issue (无论是 bug 还是 feature), 描述背景或问题,")]),t._v(" "),a("li",[t._v("本地创建分支 123-[issue] (123是 issue 的 ID), 围绕关联 issue 进行 program -> commit -> push,")]),t._v(" "),a("li",[t._v("新建 Merge Request 从 123-[issue] 到 master, 并指派给项目 Owner (或合适 Reviewer) ,")]),t._v(" "),a("li",[t._v("被指派人完成代码审查后， 执行代码合并, 同时删除分支 123-[issue]")]),t._v(" "),a("li",[t._v("如果审查不通过，则在有问题的代码处进行标记，也可以通过提交 Comment 进行讨论")])]),t._v(" "),a("p",[a("strong",[t._v("多人 Review")])]),t._v(" "),a("ol",[a("li",[t._v("提交 Merge Request 后， 被指派人可通过 @someone 邀请一个或多个额外的 Reviewer （它们会收到邮件通知）")]),t._v(" "),a("li",[t._v("被邀请的 Reviewer 看过代码后， 可回复👍或+1表示通过， 反之给出修改建议。")])]),t._v(" "),a("h3",{attrs:{id:"项目开发规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目开发规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目开发规范")]),t._v(" "),a("p",[t._v("当某个项目需要用到现有产品（或者某个其他已经交付的项目）时，必须通过 Fork 的方式创建新的 Repository，而不是在老的 Repository 上创建分支。")]),t._v(" "),a("h2",{attrs:{id:"文档规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 文档规范")]),t._v(" "),a("p",[t._v("每个 Project 的技术文档记录在这个 Project 对应的 Wiki 中，包括：")]),t._v(" "),a("ol",[a("li",[t._v("系统目标（解决的问题、应用场景等）")]),t._v(" "),a("li",[t._v("系统架构")]),t._v(" "),a("li",[t._v("概要设计")]),t._v(" "),a("li",[t._v("数据库设计")]),t._v(" "),a("li",[t._v("详细设计")]),t._v(" "),a("li",[t._v("配置信息说明")]),t._v(" "),a("li",[t._v("第三方使用说明")]),t._v(" "),a("li",[t._v("开发（贡献）说明")])]),t._v(" "),a("p",[t._v("相关文档应当以 MarkDown 的形式直接写到 Wiki 中，避免编写 Word/Excel 类型的文档，因为 Wiki 更加直观，可读性强，方便在线编辑更新。")]),t._v(" "),a("p",[a("code",[t._v("TODO 项目管理相关文档等后续制定规范")])]),t._v(" "),a("h2",{attrs:{id:"持续集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续集成","aria-hidden":"true"}},[t._v("#")]),t._v(" 持续集成")]),t._v(" "),a("p",[t._v("参考"),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab CI"),a("OutboundLink")],1),t._v("实现。")]),t._v(" "),a("p",[t._v("Gitlab CI 相对于 Jenkins 的优势是：相关持续集成配置文件直接跟随 Git Project，在创建（Fork）新的项目后，配置文件也直接带上了，只需要少量的环境变量配置就好了。")]),t._v(" "),a("h3",{attrs:{id:"gitlab-ci-yml配置规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-yml配置规范","aria-hidden":"true"}},[t._v("#")]),t._v(" .gitlab-ci.yml配置规范")]),t._v(" "),a("p",[a("strong",[t._v("1. 总体阶段")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" pre_build\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" auto_test\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" push\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n")])])]),a("p",[t._v("其中每个阶段需要完成的任务如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("pre_build")]),t._v("阶段需要包含以下几个动作\n"),a("ul",[a("li",[a("code",[t._v("静态检查")]),t._v(" "),a("ul",[a("li",[t._v("除了打tag触发的CI以外，其它所有触发都要执行该动作")])])]),t._v(" "),a("li",[a("code",[t._v("maven site")]),t._v(" "),a("ul",[a("li",[t._v("只在master分支被push或merge时执行该动作")])])]),t._v(" "),a("li",[a("code",[t._v("单元测试")]),t._v(" "),a("ul",[a("li",[t._v("除了打tag触发的CI以外，其它所有触发都要执行该动作")])])])])]),t._v(" "),a("li",[a("code",[t._v("build")]),t._v("阶段\n"),a("ul",[a("li",[t._v("编译docker镜像并上传到本地仓库")]),t._v(" "),a("li",[t._v("需要将版本信息加入镜像中，例如java项目可以把包含版本信息的"),a("code",[t._v("version")]),t._v("文件加入war包中")]),t._v(" "),a("li",[t._v("仅在master分支或/^hotfix-.*$/被push或merge时执行该动作")]),t._v(" "),a("li",[t._v("打tag时不执行该动作")])])]),t._v(" "),a("li",[a("code",[t._v("auto_test")]),t._v("阶段\n"),a("ul",[a("li",[t._v("自动化测试")]),t._v(" "),a("li",[t._v("仅在master分支或/^hotfix-.*$/被push或merge时执行该动作")]),t._v(" "),a("li",[t._v("打tag时不执行该动作")])])]),t._v(" "),a("li",[a("code",[t._v("push")]),t._v("阶段\n"),a("ul",[a("li",[t._v("将docker镜像打tag("),a("a",{attrs:{href:"https://git.fpi-inc.com/simple/servers/simple-user-center-server#docker%E9%95%9C%E5%83%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99",target:"_blank",rel:"noopener noreferrer"}},[t._v("打tag规则"),a("OutboundLink")],1),t._v(")\n"),a("ul",[a("li",[t._v("tag的组成为 "),a("code",[t._v("仓库名/镜像名:镜像版本")])]),t._v(" "),a("li",[t._v("仓库名为本地或远端仓库的域名")]),t._v(" "),a("li",[t._v("镜像名固定为工程名："),a("code",[t._v("$CI_PROJECT_NAME")])]),t._v(" "),a("li",[t._v("tag的version为"),a("code",[t._v("latest")]),t._v("和"),a("code",[t._v("$CI_COMMIT_TAG")])]),t._v(" "),a("li",[t._v("示例：需要上传到本地仓库的docker镜像tag："),a("code",[t._v("$LOCAL_REPERTORY/$CI_PROJECT_NAME:latest")]),t._v("和"),a("code",[t._v("$LOCAL_REPERTORY/$CI_PROJECT_NAME:$CI_COMMIT_TAG")])])])]),t._v(" "),a("li",[t._v("将打好tag的docker镜像上传到本地和远端仓库")]),t._v(" "),a("li",[t._v("只有在打tag(这个tag指的是git的tag而不是docker的tag)时执行该动作")])])]),t._v(" "),a("li",[a("code",[t._v("deploy")]),t._v("阶段\n"),a("ul",[a("li",[t._v("开发环境部署：\n"),a("ul",[a("li",[t._v("除了打tag触发的CI以外，其它所有触发都要执行该动作")]),t._v(" "),a("li",[t._v("需要自动执行")]),t._v(" "),a("li",[t._v("需要定义"),a("code",[t._v("environment")]),t._v("信息")])])]),t._v(" "),a("li",[t._v("测试环境部署\n"),a("ul",[a("li",[t._v("仅在master分支或/^hotfix-.*$/被push或merge时执行该动作")]),t._v(" "),a("li",[t._v("打tag时不执行该动作")]),t._v(" "),a("li",[t._v("需要手动执行")]),t._v(" "),a("li",[t._v("需要定义"),a("code",[t._v("environment")]),t._v("信息")])])]),t._v(" "),a("li",[t._v("其他生产环境部署\n"),a("ul",[a("li",[t._v("只有在打tag时执行该动作")]),t._v(" "),a("li",[t._v("需要手动执行")]),t._v(" "),a("li",[t._v("需要定义"),a("code",[t._v("environment")]),t._v("信息")])])])])])]),t._v(" "),a("p",[a("strong",[t._v("2. 变量")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("yml文件中预置的变量如下，其它工程如果不同，可以用gitlab工程中创建同名变量进行覆盖")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("LOCAL_REPERTORY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-lh.fpi-inc.site"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("LOCAL_REPERTORY_USERNAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" admin\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("REMOTE_REPERTORY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker.fpi-inc.site"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("REMOTE_REPERTORY_USERNAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" admin\n")])])])]),t._v(" "),a("li",[a("p",[t._v("gitlab工程中的预置变量（优先级最高）")]),t._v(" "),a("ul",[a("li",[t._v("SSH_PRIVATE_KEY：用来免密码登录远程linux系统")]),t._v(" "),a("li",[t._v("LOCAL_NEXUS_PASSWD：本地仓库登录密码")]),t._v(" "),a("li",[t._v("REMOTE_REPERTORY_PASSWD：远程仓库登录密码")])])])]),t._v(" "),a("p",[a("strong",[t._v("3. 预处理")])]),t._v(" "),a("blockquote",[a("p",[t._v("用来免密登录远程linux系统")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 'which ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" ( apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y && apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install \nopenssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y )'\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eval $(ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s)\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('add <(echo "$SSH_PRIVATE_KEY")\n  '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p ~/.ssh\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" '"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("f /.dockerenv "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" && echo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('e "Host \n*\\n\\tStrictHostKeyChecking no\\n\\n" '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" ~/.ssh/config'\n")])])]),a("p",[a("strong",[t._v("5. "),a("code",[t._v(".gitlab-ci.yml")]),a("a",{attrs:{href:"https://git.fpi-inc.com/simple/servers/simple-user-center-server/blob/master/.gitlab-ci.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("文件样例"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它","aria-hidden":"true"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"%E5%90%88%E5%B9%B6Commit"}},[t._v("合并 Commit")])])])])},[],!1,null,null,null);e.default=_.exports}}]);